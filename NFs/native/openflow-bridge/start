#!/bin/bash

#Author: Sergio Nuccio
#Date: November 7th 2015
#Brief: start script for a native network function that creates a ovs bridge
#	that receives OpenFlow rules from a controller.

#dependencies: openvswitch

#$1 LSI ID								(e.g. 2)
#$2 NF name								(e.g. OFbridge)
#$3 number_of_ports							(e.g. 3)
#The next $4 parameters are the names of the ports of the NF		(e.g. vEth0 vEth1 vEth2)
#The first of them is connected to the controller

if (( $EUID != 0 )) 
then
    echo "[nativeNF_OF_bridge_start] This script must be executed with ROOT privileges"
    exit 0
fi

#enable ipv4 forwarding
sysctl -w net.ipv4.ip_forward=1

#debug
#set -x

#start openvswitch (if not started yet)
/usr/share/openvswitch/scripts/ovs-ctl start

#bridge name: <lsi_ID>_<NFname>_ofb
br_name=$1_$2_ofb


#create the bridge
ovs-vsctl add-br $br_name

#create virtual links between this bridge and the LSI
current=4
for (( c=1; c < $3; c++ ))
do
	
	#change type of the port on the LSI
	ovs-vsctl set Interface ${!current} type=patch
	
	#create peer port on this bridge (type patch)
	ovs-vsctl add-port $br_name ${!current}_p -- set Interface ${!current}_p type=patch
	
	#create the virtual link
	sudo ovs-vsctl set interface ${!current} options:peer=${!current}_p
	sudo ovs-vsctl set interface ${!current}_p options:peer=${!current}

	current=`expr $current + 1`

done

#assign IP address to the port connected to the controller
#it is statically mapped to the network function since the UN does not provide configuration
ifconfig $4 10.0.155.1 netmask 255.255.255.252

#It is supposed that the port on the controller has the IP address 10.0.155.2/30

echo "[nativeNF_OF_bridge_start] openflow_bridge started"

exit 0


